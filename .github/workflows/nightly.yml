name: Nightly Build

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  pre-check:
    name: Pre-check
    runs-on: ubuntu-latest
    outputs:
      commit_count: ${{ steps.get_commit_count.outputs.commit_count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to count the commits

      - name: Get new commits
        id: get_commit_count
        run: echo "commit_count=$(git log --oneline --since '24 hours ago' | wc -l)" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: [pre-check]
    if: ${{ needs.pre-check.outputs.commit_count > 0 }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build binary
        run: cargo build --release --all-targets

      - name: Archive binary
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a algotrap-${{ runner.os }}.zip target/release/algotrap.exe
            echo "ASSET=algotrap-${{ runner.os }}.zip" >> $GITHUB_ENV
          else
            tar -czf algotrap-${{ runner.os }}.tar.gz -C target/release algotrap
            echo "ASSET=algotrap-${{ runner.os }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: algotrap-${{ runner.os }}
          path: ${{ env.ASSET }}

  build-musl:
    name: Build MUSL
    needs: [pre-check]
    if: ${{ needs.pre-check.outputs.commit_count > 0 }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: x86_64-unknown-linux-musl

      - name: Install musl-tools
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target x86_64-unknown-linux-musl --all-targets

      - name: Archive binary
        shell: bash
        run: |
          tar -czf algotrap-x86_64-unknown-linux-musl.tar.gz -C target/x86_64-unknown-linux-musl/release algotrap
          echo "ASSET=algotrap-x86_64-unknown-linux-musl.tar.gz" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: algotrap-x86_64-unknown-linux-musl
          path: ${{ env.ASSET }}

  create-release:
    name: Create Release
    needs: [build, build-musl, pre-check]
    if: ${{ needs.pre-check.outputs.commit_count > 0 }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          name: Nightly Build ${{ github.run_id }}
          tag_name: nightly-${{ github.run_id }}
          token: ${{ secrets.NIGHTLY_RELEASE_TOKEN }}
          draft: false
          prerelease: false
          files: |
            artifacts/algotrap-Linux/algotrap-Linux.tar.gz
            artifacts/algotrap-macOS/algotrap-macOS.tar.gz
            artifacts/algotrap-Windows/algotrap-Windows.zip
            artifacts/algotrap-x86_64-unknown-linux-musl/algotrap-x86_64-unknown-linux-musl.tar.gz

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: [create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:nightly-${{ github.run_id }}